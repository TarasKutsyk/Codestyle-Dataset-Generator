code,examples,label
# Add some extra indentation on the conditional continuation line.\nif (this_is_one_thing\n        and that_is_another_thing):\n    do_something(),"1.
if (user_input == 'yes' and
        confirmation == True):
    process_data()

2.
if (x > 0 and
        y < 10):
    calculate_result(x, y)

3.
if (is_valid_email(email) and
        is_valid_password(password)):
    authenticate_user(email, password)

4.
if (check_balance() > 1000 and
        is_approved()):
    make_purchase()

5.
if (weather_condition == 'sunny' and
        temperature > 20):
    plan_outdoor_activity()

6.
if (file_exists(file_path) and
        has_permission(file_path)):
    read_file(file_path)

7.
if (is_employee(user_id) and
        department == 'IT'):
    grant_access(user_id)

8.
if (validate_input(user_data) and
        user_data['age'] >= 18):
    process_registration(user_data)

9.
if (check_internet_connection() and
        is_logged_in(user_id)):
    sync_data(user_id)

10.
if (is_prime(num) and
        num % 2 == 0):
    print(f""{num} is an even prime number"")",correct
# No extra indentation.\nif (this_is_one_thing and\n    that_is_another_thing):\n    do_something(),"1.
if (foo_condition and
    bar_condition):
    perform_action()

2.
if (user_authenticated and
    has_permission):
    grant_access()

3.
if (weather_is_sunny and
    temperature_is_warm):
    go_to_beach()

4.
if (file_exists and
    file_is_readable):
    read_file_contents()

5.
if (inventory_has_items and
    customer_has_funds):
    process_order()

6.
if (network_is_available and
    server_is_responding):
    fetch_data()

7.
if (email_is_valid and
    password_meets_criteria):
    create_account()

8.
if (sensor_is_working and
    data_is_accurate):
    analyze_readings()

9.
if (task_is_complete and
    no_errors_occurred):
    mark_as_successful()

10.
if (user_input_is_valid and
    operation_is_permitted):
    execute_command()",correct
"# The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct, as in:\nmy_list = [\n    1, 2, 3,\n    4, 5, 6,\n]","1.
foo = {
    ""long_string_key"": ""EDUCATIONAL""
                       ""SERVICE"",
    ""other_key"": ""VALUES""
}

2.
example_dict = {
    ""key1"": ""value1"",
    ""key2"": ""value2"",
    ""key3"": ""value3""
}

3.
result = some_long_function_name(
    ""long_argument"",
    ""another_long_argument""
)

4.
my_list = [
    1, 2, 3,
    4, 5, 6,
    7, 8, 9
]

5.
x = PrettySingleLineButLongClassName(
    ""hello"", ""world"",
    ""this"", ""is"",
    ""an"", ""example""
)

6.
another_dict = {
    ""foo"": ""bar"",
    ""baz"": ""qux"",
    ""long_key"": ""long_value""
}

7.
my_tuple = (
    1, 2, 3, 4,
    5, 6, 7, 8
)

8.
some_function_call(
    ""hello"",
    ""world"",
    third_argument=""foo""
)

9.
example_dict = {
    ""key1"": ""value1"",
    ""key2"": ""value2"",
    ""key3"": ""value3""
}

10.
my_list = [
    1, 2, 3,
    4, 5, 6,
    7, 8, 9
]",correct
"# The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct, as in:\nresult = some_function_that_takes_arguments(\n    'a', 'b', 'c',\n    'd', 'e', 'f',\n)","1.
foo = long_function_name(
    var_one, var_two, var_three,
    var_four, var_five, var_six,
)

2.
result = another_long_function(
    argument_a, argument_b, argument_c,
    argument_d, argument_e, argument_f,
)

3.
my_list = [
    1, 2, 3,
    4, 5, 6,
]

4.
dictionary = {
    'key1': 'value1',
    'key2': 'value2',
    'key3': 'value3',
}

5.
long_string = (
    'This is a long string '
    'that spans multiple lines '
    'using parentheses.'
)

6.
function_call(
    param1, param2, param3,
    param4, param5, param6,
)

7.
data = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
]

8.
wrapped_text = (
    'This is a long text that needs to be '
    'wrapped across multiple lines.'
)

9.
result = some_function_with_many_arguments(
    arg1, arg2, arg3,
    arg4, arg5, arg6,
    arg7, arg8, arg9,
)

10.
my_tuple = (
    'value1', 'value2', 'value3',
    'value4', 'value5', 'value6',
)",correct
