"style","code","label","processed"
"Aligned with opening delimiter.","bar = another_long_function(arg_one, arg_two,
                            arg_three, arg_four)
","correct","True"
"Aligned with opening delimiter.","baz = yet_another_function(param1, param2,
                           param3, param4)
","correct","True"
"Aligned with opening delimiter.","qux = some_other_function(first_arg, second_arg,
                          third_arg, fourth_arg)
","correct","True"
"Aligned with opening delimiter.","quux = a_different_function(argument1, argument2,
                            argument3, argument4)
","correct","True"
"Aligned with opening delimiter.","corge = function_with_args(arg_a, arg_b,
                           arg_c, arg_d)
","correct","True"
"Aligned with opening delimiter.","grault = another_func_name(param_x, param_y,
                           param_z, param_w)
","correct","True"
"Aligned with opening delimiter.","garply = func_with_long_args(very_long_arg1, very_long_arg2,
                             very_long_arg3, very_long_arg4)
","correct","True"
"Aligned with opening delimiter.","waldo = another_example(short_arg, longer_arg,
                        even_longer_arg, longest_arg)
","correct","True"
"Aligned with opening delimiter.","fred = yet_another_example(arg1, arg2,
                           arg3, arg4)
","correct","True"
"Aligned with opening delimiter.","plugh = one_more_example(param_a, param_b,
                         param_c, param_d)","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def calculate_area(
    length, width, height,
    shape):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def process_data(
    input_file, output_dir,
    delimiter):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def validate_user(
    username, password,
    email, phone):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def build_report(
    data, report_type,
    start_date, end_date):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def send_notification(
    recipient, message,
    subject, priority):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def analyze_sentiment(
    text, language,
    model):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def generate_password(
    length, include_numbers,
    include_symbols):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def parse_log_file(
    log_file, pattern,
    start_time, end_time):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def encrypt_data(
    plaintext, key,
    algorithm):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def train_model(
    features, labels,
    model_type, hyperparams):","correct","True"
"Hanging indents should add a level.","bar = very_long_function_name(
        arg_one, arg_two,
        arg_three, arg_four)
","correct","False"
"Hanging indents should add a level.","baz = another_long_function(
        param1, param2,
        param3, param4)
","correct","False"
"Hanging indents should add a level.","qux = yet_another_long_function_name(
        argument_one, argument_two,
        argument_three, argument_four)
","correct","False"
"Hanging indents should add a level.","corge = function_with_many_arguments(
        arg1, arg2,
        arg3, arg4,
        arg5, arg6)
","correct","False"
"Hanging indents should add a level.","grault = long_name_function(
        param_a, param_b,
        param_c, param_d)
","correct","False"
"Hanging indents should add a level.","garply = function_name_is_long_too(
        argument1, argument2,
        argument3, argument4)
","correct","False"
"Hanging indents should add a level.","waldo = really_long_function_name(
        param_one, param_two,
        param_three, param_four)
","correct","False"
"Hanging indents should add a level.","fred = another_long_name_function(
        arg_a, arg_b,
        arg_c, arg_d)
","correct","False"
"Hanging indents should add a level.","plugh = yet_another_long_function(
        param1, param2,
        param3, param4,
        param5, param6)
","correct","False"
"Hanging indents should add a level.","xyzzy = long_function_name(
        argument_a, argument_b,
        argument_c, argument_d)","correct","False"
"No extra indentation.","if (x_condition and
    y_condition):

","correct","True"
"No extra indentation.","while (counter < limit and
       data_available):

","correct","True"
"No extra indentation.","if (check_status() and
    process_data()):

","correct","True"
"No extra indentation.","while (not_empty(queue) and
       active_threads):

","correct","True"
"No extra indentation.","if (validate_input(value) and
    sanitize_data(value)):

","correct","True"
"No extra indentation.","while (connection_alive and
       receive_data()):

","correct","True"
"No extra indentation.","if (user_authenticated(credentials) and
    authorize_access(user, resource)):

","correct","True"
"No extra indentation.","while (has_more_items(dataset) and
       process_item(next_item())):

","correct","True"
"No extra indentation.","if (check_dependencies() and
    install_packages()):

","correct","True"
"No extra indentation.","while (monitor_system() and
       send_updates()):","correct","True"
"Add some extra indentation on the conditional continuation line.","if (check_condition_one
        and check_another_condition):

","correct","False"
"Add some extra indentation on the conditional continuation line.","while (keep_running
        and not_at_end):

","correct","False"
"Add some extra indentation on the conditional continuation line.","if (verify_user_input
        or raise_error):

","correct","False"
"Add some extra indentation on the conditional continuation line.","while (data_available
        and process_running):

","correct","False"
"Add some extra indentation on the conditional continuation line.","if (is_valid_operation
        and has_permission):

","correct","False"
"Add some extra indentation on the conditional continuation line.","while (connection_alive
        and transmitting_data):

","correct","False"
"Add some extra indentation on the conditional continuation line.","if (validate_credentials
        or show_error_message):

","correct","False"
"Add some extra indentation on the conditional continuation line.","while (resources_available
        and task_incomplete):

","correct","False"
"Add some extra indentation on the conditional continuation line.","if (check_file_existence
        and open_for_reading):

","correct","False"
"Add some extra indentation on the conditional continuation line.","while (user_active
        and monitor_activity):","correct","False"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","fruits = [
    'apple', 'banana', 'orange',
    'kiwi', 'mango', 'pineapple',
]
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","get_total = lambda numbers: sum(
    num for num in numbers
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","person_info = {
    'name': 'John Doe',
    'age': 30,
    'city': 'New York',
}
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","def calculate_area(length, width):
    return length * width

areas = [
    calculate_area(3, 4),
    calculate_area(5, 6),
    calculate_area(7, 8),
]
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","my_dict = {
    'key1': [1, 2, 3, 4, 5],
    'key2': (6, 7, 8, 9, 10),
}
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","numbers = [
    1, 2, 3,
    4, 5, 6,
    7, 8, 9,
]
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","def greet(name):
    print(
        f'Hello, {name}!'
    )

greet('Alice')
greet('Bob')
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
]
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","result = sum(
    num ** 2 for num in range(1, 11)
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","student_records = [
    {'name': 'Alice', 'grade': 'A'},
    {'name': 'Bob', 'grade': 'B'},
    {'name': 'Charlie', 'grade': 'C'},
]","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","result = my_function(
    'long_argument_1', 'long_argument_2', 'long_argument_3',
    'long_argument_4', 'long_argument_5', 'long_argument_6',
         )
","correct","False"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","output = another_func(
    'arg1', 'arg2', 'arg3',
    'arg4', 'arg5', 'arg6',
                      )
","correct","False"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","data = ['item1', 'item2', 'item3',
        'item4', 'item5', 'item6',
        ]
","correct","False"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","dictionary = {
    'key1': 'value1', 'key2': 'value2', 'key3': 'value3',
    'key4': 'value4', 'key5': 'value5', 'key6': 'value6',
}
","correct","False"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","result = very_long_function_name(
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
)
","correct","False"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","output = func_with_long_args(
    'argument_one', 'argument_two', 'argument_three',
    'argument_four', 'argument_five', 'argument_six',
)
","correct","False"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","data = [
    'item_one', 'item_two', 'item_three',
    'item_four', 'item_five', 'item_six',
]
","correct","False"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","dictionary = {
    'key_one': 'value_one', 'key_two': 'value_two',
    'key_three': 'value_three', 'key_four': 'value_four',
}
","correct","False"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","result = another_function(
    'arg1', 'arg2', 'arg3', 'arg4',
    'arg5', 'arg6', 'arg7', 'arg8',
)
","correct","False"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","output = yet_another_func(
    'argument_a', 'argument_b', 'argument_c',
    'argument_d', 'argument_e', 'argument_f',
)","correct","False"
"Hanging indents should add a level.","bar = another_long_function_name(
    arg_one, arg_two,
    arg_three, arg_four)
","correct","True"
"Hanging indents should add a level.","baz = yet_another_long_function(
    param1, param2,
    param3, param4)
","correct","True"
"Hanging indents should add a level.","qux = some_other_long_function_name(
    first_arg, second_arg,
    third_arg, fourth_arg)
","correct","True"
"Hanging indents should add a level.","quux = a_really_long_function_name(
    one, two,
    three, four)
","correct","True"
"Hanging indents should add a level.","corge = function_with_long_name(
    arg1, arg2,
    arg3, arg4)
","correct","True"
"Hanging indents should add a level.","grault = another_function_with_long_name(
    param_a, param_b,
    param_c, param_d)
","correct","True"
"Hanging indents should add a level.","garply = yet_one_more_long_function_name(
    first, second,
    third, fourth)
","correct","True"
"Hanging indents should add a level.","waldo = long_name_function(
    arg_foo, arg_bar,
    arg_baz, arg_qux)
","correct","True"
"Hanging indents should add a level.","fred = some_long_function_name(
    one_arg, two_arg,
    three_arg, four_arg)
","correct","True"
"Hanging indents should add a level.","plugh = another_long_name_function(
    param1, param2,
    param3, param4)","correct","True"
"Add some extra indentation on the conditional continuation line.","if (check_this_condition
        and also_check_another_condition):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (verify_status
        and confirm_availability):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (evaluate_expression
        and process_data):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (analyze_input
        and validate_response):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (check_requirements
        and meet_criteria):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (assess_situation
        and determine_action):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (review_document
        and approve_changes):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (monitor_performance
        and optimize_system):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (examine_evidence
        and reach_conclusion):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (investigate_issue
        and resolve_problem):","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","result = my_function(
    'long_argument_1', 'long_argument_2', 'long_argument_3',
    'long_argument_4', 'long_argument_5', 'long_argument_6',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","output = another_function(
    'arg1', 'arg2', 'arg3',
    'arg4', 'arg5', 'arg6',
    'arg7', 'arg8', 'arg9',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","processed_data = process_data(
    'data1', 'data2', 'data3',
    'data4', 'data5', 'data6',
    'data7', 'data8', 'data9',
    'data10', 'data11', 'data12',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","result = calculate_something(
    'value1', 'value2', 'value3',
    'value4', 'value5', 'value6',
    'value7', 'value8', 'value9',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","transformed_data = transform_data(
    'input1', 'input2', 'input3',
    'input4', 'input5', 'input6',
    'input7', 'input8', 'input9',
    'input10', 'input11', 'input12',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","filtered_data = filter_data(
    'item1', 'item2', 'item3',
    'item4', 'item5', 'item6',
    'item7', 'item8', 'item9',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","processed_result = process_result(
    'value_a', 'value_b', 'value_c',
    'value_d', 'value_e', 'value_f',
    'value_g', 'value_h', 'value_i',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","output_data = generate_output(
    'input_a', 'input_b', 'input_c',
    'input_d', 'input_e', 'input_f',
    'input_g', 'input_h', 'input_i',
    'input_j', 'input_k', 'input_l',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","final_result = compute_final_result(
    'arg_1', 'arg_2', 'arg_3',
    'arg_4', 'arg_5', 'arg_6',
    'arg_7', 'arg_8', 'arg_9',
    'arg_10', 'arg_11', 'arg_12',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","processed_output = process_output(
    'data_a', 'data_b', 'data_c',
    'data_d', 'data_e', 'data_f',
    'data_g', 'data_h', 'data_i',
    'data_j', 'data_k', 'data_l',
)","correct","True"
