"style","code","label","processed"
"Aligned with opening delimiter.","bar = another_long_function(arg_one, arg_two,
                            arg_three, arg_four)
","correct","True"
"Aligned with opening delimiter.","baz = yet_another_function(param1, param2,
                           param3, param4)
","correct","True"
"Aligned with opening delimiter.","qux = some_other_function(first_arg, second_arg,
                          third_arg, fourth_arg)
","correct","True"
"Aligned with opening delimiter.","quux = a_different_function(argument1, argument2,
                            argument3, argument4)
","correct","True"
"Aligned with opening delimiter.","corge = function_with_args(arg_a, arg_b,
                           arg_c, arg_d)
","correct","True"
"Aligned with opening delimiter.","grault = another_func_name(param_x, param_y,
                           param_z, param_w)
","correct","True"
"Aligned with opening delimiter.","garply = func_with_long_args(very_long_arg1, very_long_arg2,
                             very_long_arg3, very_long_arg4)
","correct","True"
"Aligned with opening delimiter.","waldo = another_example(short_arg, longer_arg,
                        even_longer_arg, longest_arg)
","correct","True"
"Aligned with opening delimiter.","fred = yet_another_example(arg1, arg2,
                           arg3, arg4)
","correct","True"
"Aligned with opening delimiter.","plugh = one_more_example(param_a, param_b,
                         param_c, param_d)","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def calculate_area(
    length, width, height,
    shape):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def process_data(
    input_file, output_dir,
    delimiter):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def validate_user(
    username, password,
    email, phone):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def build_report(
    data, report_type,
    start_date, end_date):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def send_notification(
    recipient, message,
    subject, priority):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def analyze_sentiment(
    text, language,
    model):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def generate_password(
    length, include_numbers,
    include_symbols):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def parse_log_file(
    log_file, pattern,
    start_time, end_time):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def encrypt_data(
    plaintext, key,
    algorithm):
","correct","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def train_model(
    features, labels,
    model_type, hyperparams):","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","fruits = [
    'apple', 'banana', 'orange',
    'kiwi', 'mango', 'pineapple',
]
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","get_total = lambda numbers: sum(
    num for num in numbers
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","person_info = {
    'name': 'John Doe',
    'age': 30,
    'city': 'New York',
}
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","def calculate_area(length, width):
    return length * width

areas = [
    calculate_area(3, 4),
    calculate_area(5, 6),
    calculate_area(7, 8),
]
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","my_dict = {
    'key1': [1, 2, 3, 4, 5],
    'key2': (6, 7, 8, 9, 10),
}
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","numbers = [
    1, 2, 3,
    4, 5, 6,
    7, 8, 9,
]
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","def greet(name):
    print(
        f'Hello, {name}!'
    )

greet('Alice')
greet('Bob')
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
]
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","result = sum(
    num ** 2 for num in range(1, 11)
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","student_records = [
    {'name': 'Alice', 'grade': 'A'},
    {'name': 'Bob', 'grade': 'B'},
    {'name': 'Charlie', 'grade': 'C'},
]","correct","True"
"Hanging indents should add a level.","bar = another_long_function_name(
    arg_one, arg_two,
    arg_three, arg_four)
","correct","True"
"Hanging indents should add a level.","baz = yet_another_long_function(
    param1, param2,
    param3, param4)
","correct","True"
"Hanging indents should add a level.","qux = some_other_long_function_name(
    first_arg, second_arg,
    third_arg, fourth_arg)
","correct","True"
"Hanging indents should add a level.","quux = a_really_long_function_name(
    one, two,
    three, four)
","correct","True"
"Hanging indents should add a level.","corge = function_with_long_name(
    arg1, arg2,
    arg3, arg4)
","correct","True"
"Hanging indents should add a level.","grault = another_function_with_long_name(
    param_a, param_b,
    param_c, param_d)
","correct","True"
"Hanging indents should add a level.","garply = yet_one_more_long_function_name(
    first, second,
    third, fourth)
","correct","True"
"Hanging indents should add a level.","waldo = long_name_function(
    arg_foo, arg_bar,
    arg_baz, arg_qux)
","correct","True"
"Hanging indents should add a level.","fred = some_long_function_name(
    one_arg, two_arg,
    three_arg, four_arg)
","correct","True"
"Hanging indents should add a level.","plugh = another_long_name_function(
    param1, param2,
    param3, param4)","correct","True"
"Add some extra indentation on the conditional continuation line.","if (check_this_condition
        and also_check_another_condition):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (verify_status
        and confirm_availability):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (evaluate_expression
        and process_data):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (analyze_input
        and validate_response):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (check_requirements
        and meet_criteria):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (assess_situation
        and determine_action):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (review_document
        and approve_changes):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (monitor_performance
        and optimize_system):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (examine_evidence
        and reach_conclusion):

","correct","True"
"Add some extra indentation on the conditional continuation line.","if (investigate_issue
        and resolve_problem):","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","result = my_function(
    'long_argument_1', 'long_argument_2', 'long_argument_3',
    'long_argument_4', 'long_argument_5', 'long_argument_6',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","output = another_function(
    'arg1', 'arg2', 'arg3',
    'arg4', 'arg5', 'arg6',
    'arg7', 'arg8', 'arg9',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","processed_data = process_data(
    'data1', 'data2', 'data3',
    'data4', 'data5', 'data6',
    'data7', 'data8', 'data9',
    'data10', 'data11', 'data12',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","result = calculate_something(
    'value1', 'value2', 'value3',
    'value4', 'value5', 'value6',
    'value7', 'value8', 'value9',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","transformed_data = transform_data(
    'input1', 'input2', 'input3',
    'input4', 'input5', 'input6',
    'input7', 'input8', 'input9',
    'input10', 'input11', 'input12',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","filtered_data = filter_data(
    'item1', 'item2', 'item3',
    'item4', 'item5', 'item6',
    'item7', 'item8', 'item9',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","processed_result = process_result(
    'value_a', 'value_b', 'value_c',
    'value_d', 'value_e', 'value_f',
    'value_g', 'value_h', 'value_i',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","output_data = generate_output(
    'input_a', 'input_b', 'input_c',
    'input_d', 'input_e', 'input_f',
    'input_g', 'input_h', 'input_i',
    'input_j', 'input_k', 'input_l',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","final_result = compute_final_result(
    'arg_1', 'arg_2', 'arg_3',
    'arg_4', 'arg_5', 'arg_6',
    'arg_7', 'arg_8', 'arg_9',
    'arg_10', 'arg_11', 'arg_12',
)
","correct","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct","processed_output = process_output(
    'data_a', 'data_b', 'data_c',
    'data_d', 'data_e', 'data_f',
    'data_g', 'data_h', 'data_i',
    'data_j', 'data_k', 'data_l',
)","correct","True"
"Aligned with opening delimiter.","foo = long_function_name(var_one, var_two,
    var_three, var_four)
","wrong","True"
"Aligned with opening delimiter.","bar = another_long_function(arg1, arg2,
                           arg3, arg4)
","wrong","True"
"Aligned with opening delimiter.","baz = yet_another_function(param_one,
                         param_two, param_three,
                          param_four)
","wrong","True"
"Aligned with opening delimiter.","qux = function_with_many_args(arg1, arg2, arg3,
                              arg4, arg5, arg6,
                   arg7, arg8, arg9)
","wrong","True"
"Aligned with opening delimiter.","corge = some_function(very_long_argument_name_1,
                    very_long_argument_name_2,
                     very_long_argument_name_3)
","wrong","True"
"Aligned with opening delimiter.","grault = another_function(short_arg1,
                        very_very_very_long_argument_name,
                         another_long_arg)
","wrong","True"
"Aligned with opening delimiter.","garply = function_call(arg1,
                     arg2, arg3,
                    arg4, arg5)
","wrong","True"
"Aligned with opening delimiter.","waldo = yet_another_call(param1, param2,
                param3, param4,
                         param5)
","wrong","True"
"Aligned with opening delimiter.","fred = long_function_name(argument_one,
                        argument_two, argument_three,
                          argument_four, argument_five)
","wrong","True"
"Aligned with opening delimiter.","plugh = function_with_many_params(param1, param2,
                   param3, param4, param5,
                  param6, param7, param8)","wrong","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def very_long_function_name(
   arg1, arg2, arg3,
    arg4, arg5):

","wrong","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def calculate_something(
        x,
                y, z):

","wrong","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def process_data(data_input,
                  data_output):

","wrong","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def my_func(
arg1,arg2,
        arg3,arg4):

","wrong","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def complex_operation(
    param1, param2, param3,
param4):

","wrong","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def perform_task(
        task_input,
     task_output):

","wrong","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def analyze_data(
                data, options):

","wrong","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def generate_report(
report_type,report_format,
        report_data):

","wrong","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def preprocess_input(
input_data,
input_options):

","wrong","True"
"Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.","def run_algorithm(algorithm,
        parameters,
     data):","wrong","True"
"Hanging indents should add a level.","foo = long_function_name(var_one, var_two,
var_three, var_four)
","wrong","True"
"Hanging indents should add a level.","bar = another_long_function(
arg1, arg2,
    arg3, arg4)
","wrong","True"
"Hanging indents should add a level.","baz = yet_another_function(
    param1,
  param2, param3,
    param4)
","wrong","True"
"Hanging indents should add a level.","qux = function_with_tabs(
	tab_arg1, tab_arg2,
	    tab_arg3, tab_arg4)
","wrong","True"
"Hanging indents should add a level.","quux = mixed_indentation(
    space_arg1,
	tab_arg2,
        space_arg3,
		tab_arg4)
","wrong","True"
"Hanging indents should add a level.","corge = incorrect_spaces(
 one_space, two_space,
   six_spaces, three_spaces)
","wrong","True"
"Hanging indents should add a level.","grault = some_func(
very_long_argument_name_1,
    very_long_argument_name_2, very_long_argument_name_3,
very_long_argument_name_4)
","wrong","True"
"Hanging indents should add a level.","garply = another_func(
    'short_arg', 'longer_arg',
'much_longer_argument', 'extremely_long_argument_name')
","wrong","True"
"Hanging indents should add a level.","waldo = yet_another(
    first_arg, second_arg,
third_arg,
    fourth_arg)
","wrong","True"
"Hanging indents should add a level.","fred = last_function(
        first_arg,
second_arg,
    third_arg,
        fourth_arg)","wrong","True"
"Add some extra indentation on the conditional continuation line.","if (long_variable_name_1
                and long_variable_name_2):
","wrong","True"
"Add some extra indentation on the conditional continuation line.","if (check_condition_1(arg1, arg2)
    and check_condition_2(arg3, arg4)):
","wrong","True"
"Add some extra indentation on the conditional continuation line.","if (is_valid_input(user_input)
        and not is_empty(user_input)):
","wrong","True"
"Add some extra indentation on the conditional continuation line.","if (calculate_score(game_data)
	    and update_leaderboard(player_id, score)):
","wrong","True"
"Add some extra indentation on the conditional continuation line.","if (validate_email(email_address)
                    and send_confirmation_email(email_address)):
","wrong","True"
"Add some extra indentation on the conditional continuation line.","if (check_password_strength(password)
                and hash_password(password)):
","wrong","True"
"Add some extra indentation on the conditional continuation line.","if (process_data(input_file)
            and generate_report(processed_data)):
","wrong","True"
"Add some extra indentation on the conditional continuation line.","if (authenticate_user(username, password)
       and grant_access(user_id, permissions)):
","wrong","True"
"Add some extra indentation on the conditional continuation line.","if (check_inventory(product_id)
                     and place_order(product_id, quantity)):
","wrong","True"
"Add some extra indentation on the conditional continuation line.","if (parse_json_data(json_string)
                  and save_data_to_database(parsed_data)):","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (collection case)","my_list = [
    1, 2, 3,
     4, 5, 6,
    ]
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (collection case)","fruits = [
    'apple', 'banana',
  'orange', 'kiwi',
        ]
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (collection case)","numbers = (
    1, 2, 3,
      4, 5, 6,
    )
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (collection case)","person = {
    'name': 'John',
    'age': 30,
             'city': 'New York'}
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (collection case)","data = [
    [1, 2, 3],
     [4, 5, 6],
            ]
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (collection case)","colors = [
    'red', 'green',
    'blue'
     ]
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (collection case)","my_dict = {
    'a': 1,
    'b': 2,
             'c': 3}
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (collection case)","matrix = [
    [1, 2, 3],
    [4, 5, 6]
             ]
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (collection case)","coordinates = (
    (1, 2),
      (3, 4),
    (5, 6),
)
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (collection case)","nested_list = [
    [1, 2],
    [3, 4, 5]
                  ]","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (function call case)","result = some_long_function_name(
    'arg1', 'arg2', 'arg3',
     'arg4', 'arg5', 'arg6'
    )
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (function call case)","output = calculate_something('input1',
                              'input2',
                              'input3',
                   'input4')
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (function call case)","data = process_data('file1.txt', 'file2.txt',
                    'file3.txt', 'file4.txt'
                     )
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (function call case)","value = get_value(param1, param2,
    param3, param4
                  )
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (function call case)","result = perform_operation('a', 'b', 'c',
                           'd', 'e', 'f') 
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (function call case)","output = transform_data('input1', 'input2',
                        'input3',
                         'input4', 'input5')
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (function call case)","data = load_data('path/to/file1.txt',
                  'path/to/file2.txt',
        'path/to/file3.txt')
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (function call case)","value = calculate(arg1, arg2,
    arg3,
        arg4, arg5)
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (function call case)","result = some_function('param1',
                        'param2', 'param3',
    'param4', 'param5', 'param6'
                        )
","wrong","True"
"The closing brace/bracket/parenthesis on multiline constructs must be lined up under the first character of the line that starts the multiline construct (function call case)","output = process_input(
    'input1', 'input2',
    'input3', 'input4',
                  'input5', 'input6')","wrong","True"
"No extra indentation (same level of indent).","if (x_is_one_thing and
    y_is_another_thing):
","correct","True"
"No extra indentation (same level of indent).","if (foo_is_one_thing and
    bar_is_another_thing):
","correct","True"
"No extra indentation (same level of indent).","if (condition_one and
    condition_two):
","correct","True"
"No extra indentation (same level of indent).","if (first_condition and
    second_condition):
","correct","True"
"No extra indentation (same level of indent).","if (is_valid_input and
    has_permission):
","correct","True"
"No extra indentation (same level of indent).","if (user_authenticated and
    resource_available):
","correct","True"
"No extra indentation (same level of indent).","if (data_is_correct and
    file_exists):
","correct","True"
"No extra indentation (same level of indent).","if (check_passed and
    requirements_met):
","correct","True"
"No extra indentation (same level of indent).","if (is_active and
    is_enabled):
","correct","True"
"No extra indentation (same level of indent).","if (has_access and
    is_authorized):","correct","True"
"No extra indentation (same level of indent).","if (this_is_one_thing and
that_is_another_thing):
","wrong","True"
"No extra indentation (same level of indent).","if (foo_bar_variable and
   baz_qux_function()):
","wrong","True"
"No extra indentation (same level of indent).","if (very_long_variable_name and
      another_very_long_variable_name):
","wrong","True"
"No extra indentation (same level of indent).","if (short_var and
        long_variable_name):
","wrong","True"
"No extra indentation (same level of indent).","if (this_is_one_thing and
 that_is_another_thing):
","wrong","True"
"No extra indentation (same level of indent).","if (this_is_one_thing and
     that_is_another_thing):
","wrong","True"
"No extra indentation (same level of indent).","if (this_is_one_thing and
  that_is_another_thing):
","wrong","True"
"No extra indentation (same level of indent).","if (this_is_one_thing and
        that_is_another_thing):
","wrong","True"
"No extra indentation (same level of indent).","if (variable_name and
   another_variable_name):
","wrong","True"
"No extra indentation (same level of indent).","if (this_is_true and
     that_is_also_true):","wrong","True"
